#include <iostream>
#include <iomanip>
#include <string>
#include <array>

using namespace std;

const unsigned int boldLetterFont[26][9] = 
{   
    {'A', 0x7E, 0xC3, 0xFF, 0xFF, 0xC3, 0xC3, 0xC3, 0xC3}, //A
    {'B', 0xFE, 0xC3, 0xFF, 0xFE, 0xC3, 0xC3, 0xC3, 0xFE}, //B
    {'C', 0x7E, 0xC3, 0xC0, 0xC0, 0xC0, 0xC0, 0xC3, 0x7E}, //C
    {'D', 0xFE, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFE}, //D
    {'E', 0xFF, 0xFF, 0xC0, 0xE0, 0xE0, 0xC0, 0xC0, 0xFF}, //E
    {'F', 0xFF, 0xC0, 0xC0, 0xFC, 0xF8, 0xC0, 0xC0, 0xC0}, //F
    {'G', 0x7E, 0xC3, 0xC0, 0xC0, 0xC7, 0xC3, 0xFF, 0x7E}, //G
    {'H', 0xC3, 0xC3, 0xC3, 0xFF, 0xFF, 0xC3, 0xC3, 0xC3}, //H
    {'I', 0xFF, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x7E, 0xFF}, //I
    {'J', 0x3F, 0x03, 0x03, 0x03, 0x03, 0xC3, 0xFF, 0x7E}, //J
    {'K', 0xC6, 0xDE, 0xF8, 0xF0, 0xFC, 0xCE, 0xC6, 0xC6}, //K
    {'L', 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xFF, 0xFF}, //L
    {'M', 0xC3, 0xE7, 0xFF, 0xDB, 0xC3, 0xC3, 0xC3, 0xC3}, //M
    {'N', 0xE3, 0xF3, 0xFB, 0xDF, 0xCF, 0xC7, 0xC3, 0xC3}, //N
    {'O', 0x7E, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0x7E}, //O
    {'P', 0xFE, 0xFF, 0xC3, 0xFE, 0xFC, 0xC0, 0xC0, 0xC0}, //P
    {'Q', 0x7E, 0xC3, 0xC3, 0xC3, 0xCB, 0xC7, 0xFE, 0x7D}, //Q
    {'R', 0xFE, 0xFF, 0xC3, 0xFF, 0xFE, 0xC3, 0xC3, 0xC3}, //R
    {'S', 0x7E, 0xC3, 0xC0, 0xFE, 0x7F, 0x03, 0xC3, 0x7E}, //S
    {'T', 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18}, //T
    {'U', 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0x7E}, //U
    {'V', 0xC3, 0xC3, 0xC3, 0xE7, 0x66, 0x7E, 0x3C, 0x18}, //V
    {'W', 0xC3, 0xC3, 0xC3, 0xDB, 0xDB, 0xDB, 0xFF, 0x66}, //W
    {'X', 0xC3, 0xE7, 0x7E, 0x18, 0x7E, 0xE7, 0xC3, 0xC3}, //X
    {'Y', 0xC3, 0xE7, 0x7E, 0x3C, 0x18, 0x18, 0x18, 0x18}, //Y
    {'Z', 0xFF, 0x87, 0x0E, 0x1C, 0x38, 0x70, 0xE1, 0xFF}, //Z
};

// Converting to binary belongs here

/*
WHAT THE HELL IM DOING:
take in a 
return a 2d string pointer array (so it can expand)
compare boldLetterLibrary[i][0]




inputs take in the
wait
fuck how do i compare?





*/
// string

string** hex2bin(char* userInputChar, unsigned int boldLetterFont){
    int(*font)[9];
    font = boldLetterFont;
    int wireInt = 0;            //temporarily hold the value of wireInt, to be operated on for the conversion from Hex to Bin
    int asciiCheck = 0;   
    string wireString = "";     //temporarly holds the binary string while calculations are ongoing to tehn give it it binString eventually
    //unsigned  string** hexString[sizeof(userInputChar)/sizeof(userInputChar[0])][8] ;

    string **binString;             //dynamic 2d pointer array (i hope works) that will contain all the binary strings for every letter in the given string 
    binString = new int*[10];       //dynamic array of size[10] of pointers to int

    for (int i = 0; i < 8; i++) {   
        binString[i] = new int[8];  //each of the i-th pointer is now pointing to dynamic array size[10] of actual int values 
    }


    for ( int i = 0; i < sizeof(userInputChar)/sizeof(userInputChar[0]); i++){  //increment based on size of array
        for (int j = 0; j < 25; j++){                                           //increment based on the the amount of letters or boldFontLetter size of 26
            if (*userInputChar[i] == *font[j][0]){                              //determine whether or not the char from pointer is == to 
                for (int k = 1; k < 9; k++ ){
                    wireInt = font[j][k];                                       //wireInt holds the value of font[j][k]
                    
                    for( int l = 0; l < 8; l++){
                        wireString.insert(0,to_string(wireInt % 2));
                        wireInt = wireInt / 2;
                    }
                    binString[i][k-1] = wireString;
                    wireString = "";
                    wireInt = 0;
                }
            }
        }
    }
}